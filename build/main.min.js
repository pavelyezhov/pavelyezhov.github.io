(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DAO = function () {
    function DAO() {
        _classCallCheck(this, DAO);
    }

    _createClass(DAO, [{
        key: 'init',
        value: function init() {

            this.database = firebase.database();
            this.framesRef = this.database.ref('frame');
            this.framesRef.off();
        }
    }, {
        key: 'loadItems',
        value: function loadItems(items) {
            console.log('Data: ');
            this.framesRef = this.database.ref('frame');
            this.framesRef.off();
            return this.framesRef;
        }
    }, {
        key: 'loadGame',
        value: function loadGame(id) {

            this.gameRef = this.database.ref('games/' + id);
            this.gameRef.off();
            return this.gameRef;
        }
    }, {
        key: 'loadGames',
        value: function loadGames() {

            if (!this.database) {
                this.database = firebase.database();
            }
            this.gamesRef = this.database.ref('games');
            this.gamesRef.off();
            return this.gamesRef;
        }
    }, {
        key: 'saveFrame',
        value: function saveFrame(stepId, objType, item) {

            this.framesRef = this.database.ref('frames');
            this.framesRef.off();
            this.database.ref('frame/' + stepId + objType).set({
                "content": JSON.stringify(item)
            });
        }
    }, {
        key: 'saveGame',
        value: function saveGame(item, score, player) {
            var _this = this;

            this.gamesRef = this.database.ref('games');
            this.gamesRef.off();

            this.loadGames().once('value').then(function (element) {
                //console.log(element.child('content').key + ':' + element.child('content').val());
                var newGameId;
                if (element.val() && Object.values(element.val())) {
                    newGameId = Object.values(element.val()).length + 1;
                } else {
                    newGameId = 1;
                }

                _this.database.ref('games/' + newGameId).set({
                    "game": JSON.stringify(item),
                    "player": player,
                    "score": score,
                    "time": Date.now()
                });
            });
        }
    }, {
        key: 'getFrameObjectsByFrameIdAndType',
        value: function getFrameObjectsByFrameIdAndType(stepId, objType) {

            this.framesRef = this.database.ref('frame');
            this.framesRef.off();

            var foundElem = this.framesRef.child(stepId + objType);
            return foundElem;
        }
    }]);

    return DAO;
}();

exports.default = DAO;

},{}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LocalStorageDao = function () {
    function LocalStorageDao() {
        _classCallCheck(this, LocalStorageDao);

        this.frameStoreId = 'frameStoreId';
        this.playerRecordsId = 'playerRecordsId';
        this.storage = localStorage;
    }

    _createClass(LocalStorageDao, [{
        key: 'getStoredData',
        value: function getStoredData(id) {
            return JSON.parse(this.storage.getItem(id));
        }
    }, {
        key: 'saveObject',
        value: function saveObject(item, stepId) {

            var frames = this.getStoredData(this.frameStoreId);

            // initialize if necessary
            if (frames === null) {
                frames = [];
            }
            if (!frames[stepId]) {
                frames[stepId] = {
                    enemies1: [],
                    enemies2: [],
                    hero: {}
                };
            }
            this.addItemToStore(item, frames[stepId]);
            this.storage.setItem(this.frameStoreId, JSON.stringify(frames));
            return item;
        }
    }, {
        key: 'addItemToStore',
        value: function addItemToStore(item, frameStore) {
            if (item instanceof EnemyType1) {
                frameStore.enemies1.push(item);
            } else if (item instanceof EnemyType2) {
                frameStore.enemies2.push(item);
            } else if (item instanceof Person) {
                frameStore.hero = item;
            }
        }
    }, {
        key: 'getItemsByFrameId',
        value: function getItemsByFrameId(frameId) {

            var frames = JSON.parse(this.storage.getItem(this.frameStoreId));
            return frames[frameId];
        }
    }, {
        key: 'clearFrames',
        value: function clearFrames() {
            var frames = this.getStoredData(this.frameStoreId);
            frames = null;
            this.storage.setItem(this.frameStoreId, JSON.stringify(frames));
        }
    }, {
        key: 'saveRecord',
        value: function saveRecord(score, playerName) {
            var records = this.getStoredData('playerRecordsId');
            if (records === null) {
                records = {};
            }

            var existingPlayerResult = records[playerName];
            if (!existingPlayerResult || existingPlayerResult < score) {
                records[playerName] = score;
            }

            this.storage.setItem(this.playerRecordsId, JSON.stringify(records));
        }
    }]);

    return LocalStorageDao;
}();

exports.default = LocalStorageDao;

},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Person2 = require('./Person');

var _Person3 = _interopRequireDefault(_Person2);

var _GameArenaInstance = require('./GameArenaInstance.js');

var _GameArenaInstance2 = _interopRequireDefault(_GameArenaInstance);

var _JesusImgSettings = require('../settings/JesusImgSettings');

var _JesusImgSettings2 = _interopRequireDefault(_JesusImgSettings);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EnemyType1 = function (_Person) {
    _inherits(EnemyType1, _Person);

    function EnemyType1(ctx) {
        var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;
        var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;
        var color = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'red';
        var x = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 600;
        var y = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 300;
        var speedV = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
        var speedH = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 5;
        var radius = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 200;
        var pictureNumber = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;
        var moveDirection = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 'right';

        _classCallCheck(this, EnemyType1);

        var _this = _possibleConstructorReturn(this, (EnemyType1.__proto__ || Object.getPrototypeOf(EnemyType1)).call(this));

        _this.ctx = ctx;
        _this.width = width;
        _this.height = height;
        _this.color = color;
        _this.angle = 0;
        _this.moveAngle = 0;
        _this.x = x;
        _this.y = y;
        _this.speedV = speedV;
        _this.speedH = speedH;

        _this.imgWidth = 32;
        _this.imgHeight = 48;

        _this.visionRadius = radius;
        _this.moveDirection = moveDirection;

        _this.sprites = [].slice.call(document.querySelectorAll('.Jesus-img'));
        _this.spriteNum = 0;
        _this.i = pictureNumber;
        return _this;
    }

    _createClass(EnemyType1, [{
        key: 'newPos',
        value: function newPos(fieldWidth, fieldHeight) {
            var step = 3;
            var deltaX;
            var deltaY;

            if (this.heroInVision()) {
                deltaX = defineXStepSigh(this.x, step);
                deltaY = defineYStepSigh(this.y, step);
            } else {
                deltaX = this.speedH;
                deltaY = this.speedV;
            }

            this.defineMoveDirection(deltaX, deltaY);

            this.x += deltaX;
            this.y += deltaY;

            if (this.x > fieldWidth) {
                this.x = 0;
            } else if (this.x < 0) {
                this.x = fieldWidth;
            }

            if (this.y > fieldHeight) {
                this.y = 0;
            } else if (this.y < 0) {
                this.y = fieldHeight;
            }
            return this;
        }
    }, {
        key: 'defineMoveDirection',
        value: function defineMoveDirection(deltaX, deltaY) {

            if (deltaX > 0) {
                this.moveDirection = 'right';
            }
            if (deltaX < 0) {
                this.moveDirection = 'left';
            }
            if (deltaX === 0) {
                if (deltaY >= 0) {
                    this.moveDirection = 'up';
                } else {
                    this.moveDirection = 'down';
                }
            }
        }
    }, {
        key: 'xPlusDelta',
        value: function xPlusDelta(x, delta, fieldWidth) {
            if (x + delta < 0) {
                return 0;
            } else if (x + delta > fieldWidth) {
                return fieldWidth;
            }
            return x + delta;
        }
    }, {
        key: 'yPlusDelta',
        value: function yPlusDelta(y, delta, fieldHeight) {
            if (y + delta < 0) {
                return 0;
            } else if (y + delta > fieldHeight) {
                return fieldHeight;
            }
            return y + delta;
        }
    }, {
        key: 'update',
        value: function update(ctx, showRadiuses) {

            var centerX = this.x;
            var centerY = this.y;

            ctx.save();
            ctx.translate(this.x, this.y);

            /*ctx.rotate(this.angle);
            ctx.fillStyle = this.color;
            ctx.fillRect(this.width / -2, this.height / -2, this.width, this.height);*/

            var enemyImgProperties = this.getJesusImg();
            ctx.drawImage(this.getSprite(), enemyImgProperties.sx, enemyImgProperties.sy, enemyImgProperties.sWidth, enemyImgProperties.sHeight, this.imgWidth / -2, this.imgHeight / -2, this.imgWidth, this.imgHeight);

            this.i += 1;
            if (this.i % 4 === 0) {
                this.i = 0;
            }

            ctx.restore();

            if (showRadiuses) {
                ctx.beginPath();
                ctx.arc(centerX, centerY, this.visionRadius, 0, 2 * Math.PI, false);
                ctx.lineWidth = 1;
                ctx.strokeStyle = '#003300';
                ctx.stroke();
            }
            return this;
        }
    }, {
        key: 'getSprite',
        value: function getSprite() {
            this.spriteNum = (this.spriteNum + 1) % this.sprites.length;
            return this.sprites[this.spriteNum];
        }
    }, {
        key: 'getJesusImg',
        value: function getJesusImg() {
            if (this.moveDirection === 'up') {
                return _JesusImgSettings2.default.getUpSettings()[this.i];
            }
            if (this.moveDirection === 'down') {
                return _JesusImgSettings2.default.getDownSettings()[this.i];
            }
            if (this.moveDirection === 'left') {
                return _JesusImgSettings2.default.getLeftSettings()[this.i];
            }
            if (this.moveDirection === 'right') {
                return _JesusImgSettings2.default.getRightSettings()[this.i];
            }

            // default direction
            return _JesusImgSettings2.default.getDownSettings()[this.i];
        }
    }, {
        key: 'heroInVision',
        value: function heroInVision() {
            var personPosition = _GameArenaInstance2.default.getPersonPosition();

            var deltaX = personPosition.xPerson - this.x;
            var deltaY = personPosition.yPerson - this.y;

            var distance = Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
            return distance <= this.visionRadius;
        }
    }, {
        key: 'getItemType',
        value: function getItemType() {
            return 'EnemyType1';
        }
    }]);

    return EnemyType1;
}(_Person3.default);

function defineXStepSigh(x, step) {
    var personPosition = _GameArenaInstance2.default.getPersonPosition();

    var diff = personPosition.xPerson - x;
    var sign = diff === 0 ? 0 : diff > 0 ? 1 : -1;

    return Math.abs(diff) < step ? sign : sign * step;
}

function defineYStepSigh(y, step) {
    var personPosition = _GameArenaInstance2.default.getPersonPosition();

    var diff = personPosition.yPerson - y;
    var sign = diff === 0 ? 0 : diff > 0 ? 1 : -1;

    return Math.abs(diff) < step ? 0 : sign * step;
}
exports.default = EnemyType1;

},{"../settings/JesusImgSettings":15,"./GameArenaInstance.js":6,"./Person":9}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Person2 = require('./Person');

var _Person3 = _interopRequireDefault(_Person2);

var _CatImgSettings = require('../settings/CatImgSettings');

var _CatImgSettings2 = _interopRequireDefault(_CatImgSettings);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EnemyType2 = function (_Person) {
    _inherits(EnemyType2, _Person);

    function EnemyType2(ctx) {
        var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;
        var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 32;
        var color = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'blue';
        var x = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 400;
        var y = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 400;
        var pictureNumber = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
        var moveDirection = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 'right';

        _classCallCheck(this, EnemyType2);

        var _this = _possibleConstructorReturn(this, (EnemyType2.__proto__ || Object.getPrototypeOf(EnemyType2)).call(this));

        _this.ctx = ctx;
        _this.width = width;
        _this.height = height;
        _this.color = color;
        _this.speed = 5;
        _this.angle = 0;
        _this.moveAngle = 0;
        _this.x = x;
        _this.y = y;

        _this.imgWidth = 32;
        _this.imgHeight = 32;

        _this.sprites = [].slice.call(document.querySelectorAll('.cat-img'));
        _this.spriteNum = 0;
        _this.moveDirection = moveDirection;
        _this.i = pictureNumber;
        return _this;
    }

    _createClass(EnemyType2, [{
        key: 'getSprite',
        value: function getSprite() {
            this.spriteNum = (this.spriteNum + 1) % this.sprites.length;
            return this.sprites[this.spriteNum];
        }
    }, {
        key: 'newPos',
        value: function newPos(fieldWidth, fieldHeight) {

            this.doStepDependingOnDirection();

            if (this.x > fieldWidth) {
                this.x = 0;
            } else if (this.x < 0) {
                this.x = fieldWidth;
            }

            if (this.y > fieldHeight) {
                this.y = 0;
            } else if (this.y < 0) {
                this.y = fieldHeight;
            }
            return this;
        }
    }, {
        key: 'doStepDependingOnDirection',
        value: function doStepDependingOnDirection() {
            if (this.moveDirection === 'right') {
                this.x += this.speed;
            } else if (this.moveDirection === 'left') {
                this.x -= this.speed;
            } else if (this.moveDirection === 'up') {
                this.y -= this.speed;
            } else if (this.moveDirection === 'down') {
                this.y += this.speed;
            }
        }
    }, {
        key: 'update',
        value: function update(ctx) {
            ctx.save();
            ctx.translate(this.x, this.y);
            /*ctx.rotate(this.angle);
            ctx.fillStyle = this.color;
            ctx.fillRect(this.width / -2, this.height / -2, this.width, this.height);*/

            var personImgProperties = this.getCatImg();
            ctx.drawImage(this.getSprite(), personImgProperties.sx, personImgProperties.sy, personImgProperties.sWidth, personImgProperties.sHeight, this.imgWidth / -2, this.imgHeight / -2, this.imgWidth, this.imgHeight);

            this.i += 1;
            if (this.i % 4 === 0) {
                this.i = 0;
            }

            ctx.restore();
            return this;
        }
    }, {
        key: 'getItemType',
        value: function getItemType() {
            return 'EnemyType2';
        }
    }, {
        key: 'getCatImg',
        value: function getCatImg() {
            if (this.moveDirection === 'up') {
                return _CatImgSettings2.default.getUpSettings()[this.i];
            }
            if (this.moveDirection === 'down') {
                return _CatImgSettings2.default.getDownSettings()[this.i];
            }
            if (this.moveDirection === 'left') {
                return _CatImgSettings2.default.getLeftSettings()[this.i];
            }
            if (this.moveDirection === 'right') {
                return _CatImgSettings2.default.getRightSettings()[this.i];
            }

            // default direction
            return _CatImgSettings2.default.getDownSettings()[this.i];
        }
    }]);

    return EnemyType2;
}(_Person3.default);

exports.default = EnemyType2;

},{"../settings/CatImgSettings":14,"./Person":9}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _FireBaseDao = require('../dao/FireBaseDao');

var _FireBaseDao2 = _interopRequireDefault(_FireBaseDao);

var _LocalStorageDao = require('../dao/LocalStorageDao');

var _LocalStorageDao2 = _interopRequireDefault(_LocalStorageDao);

var _DrawService = require('../service/DrawService');

var _DrawService2 = _interopRequireDefault(_DrawService);

var _GameCache = require('./GameCache');

var _GameCache2 = _interopRequireDefault(_GameCache);

var _EnemyType = require('./EnemyType1');

var _EnemyType2 = _interopRequireDefault(_EnemyType);

var _EnemyType3 = require('./EnemyType2');

var _EnemyType4 = _interopRequireDefault(_EnemyType3);

var _Person = require('./Person');

var _Person2 = _interopRequireDefault(_Person);

var _Levels = require('./Levels');

var _Levels2 = _interopRequireDefault(_Levels);

var _script = require('../script');

var _GameArenaInstance = require('./GameArenaInstance.js');

var _GameArenaInstance2 = _interopRequireDefault(_GameArenaInstance);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GameArena = function () {
    function GameArena(element, fieldWidth, fieldHeight, Person) {
        _classCallCheck(this, GameArena);

        this.fbDao = new _FireBaseDao2.default();
        this.lsDao = new _LocalStorageDao2.default();
        this.fbDao.init();

        this.gameCache = new _GameCache2.default();

        this.drawService = new _DrawService2.default(this.lsDao);

        this.stepId = 0;
        this.score = 0;
        //this.interval = 50;
        this.canvas = element;
        this.ctx = this.canvas.getContext("2d");

        this.person = new Person();
        this.enemies = [];

        this.enemies.push(new _EnemyType4.default());
        this.enemies.push(new _EnemyType4.default(this.ctx, 16, 16, 'blue', 700, 700, 0, 'down'));

        this.canvas.width = fieldWidth;
        this.canvas.height = fieldHeight;

        this.img = new Image(); // Создание нового объекта изображения
        this.img.src = 'img/grass.png';

        this.currLvl = 1;
        this.lvls = _Levels2.default.getLevels();

        if (_GameArenaInstance2.default.getInReplay() === false && _GameArenaInstance2.default.getShowBackground()) {
            this.ctx.drawImage(this.img, 0, 0, this.canvas.width, this.canvas.height);
        }
        if (_GameArenaInstance2.default.getInReplay() && this.frames[this.stepId].imageSource !== undefined) {
            this.img = new Image();
            this.img.src = this.frames[this.stepId].imageSource;
            this.ctx.drawImage(this.img, 0, 0, this.canvas.width, this.canvas.height);
        }
        this.updateState();
        //this.start();
    }

    _createClass(GameArena, [{
        key: 'start',
        value: function start() {
            var _this = this;

            this.frameNo = 0;
            this.person = new _Person2.default();
            this.interval = setInterval(this.updateState.bind(this), 50);
            window.addEventListener('keydown', function (e) {
                //e.preventDefault();
                _this.keys = _this.keys || [];
                _this.keys[e.keyCode] = e.type == "keydown";
            });
            window.addEventListener('keyup', function (e) {
                _this.keys[e.keyCode] = e.type == "keydown";
            });
        }
    }, {
        key: 'stop',
        value: function stop() {
            clearInterval(this.interval);
        }
    }, {
        key: 'clear',
        value: function clear() {
            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
            if (_GameArenaInstance2.default.getInReplay() === false && _GameArenaInstance2.default.getShowBackground()) {
                this.ctx.drawImage(this.img, 0, 0, this.canvas.width, this.canvas.height);
            }
            if (_GameArenaInstance2.default.getInReplay() && this.frames[this.stepId].imageSource !== undefined) {
                this.img = new Image();
                this.img.src = this.frames[this.stepId].imageSource;
                this.ctx.drawImage(this.img, 0, 0, this.canvas.width, this.canvas.height);
            }
        }
    }, {
        key: 'updateState',
        value: function updateState() {
            var _this2 = this;

            this.stepId += 1;
            if (this.stepId % 10 === 0) {
                this.score += 1;
                this.updateScoreArea();
            }

            this.clear();

            if (this.anyCollisionOccurred(this.person, this.enemies)) {
                if (!this.finishGame()) {
                    return;
                }
            }

            this.checkCurrentLevelPassed();

            var gameInProgressAndRadiusesAllowed = _GameArenaInstance2.default.getInReplay() === false && _GameArenaInstance2.default.getShowRadiuses();
            var inReplayStateAndRadiusesAllowed = _GameArenaInstance2.default.getInReplay() && this.frames[this.stepId].showRadiuses === true;
            var showRadiuses = inReplayStateAndRadiusesAllowed || gameInProgressAndRadiusesAllowed;

            var person = this.person.newPos({
                right: this.keys && this.keys[39],
                left: this.keys && this.keys[37],
                up: this.keys && this.keys[38],
                down: this.keys && this.keys[40]
            }, this.canvas.width, this.canvas.height).update(this.ctx);
            this.gameCache.saveHero(this.person, this.stepId);
            this.enemies.forEach(function (item) {
                var personPosition = _GameArenaInstance2.default.getPersonPosition();

                item.newPos(_this2.canvas.width, _this2.canvas.height).update(_this2.ctx, showRadiuses);
                _this2.gameCache.saveEnemy(item, _this2.stepId);
            });
            if (_GameArenaInstance2.default.getShowBackground()) {
                this.gameCache.saveBackGroundImage(this.img.src, this.stepId);
            }
            this.gameCache.savePersonRadiusesShowOption(this.stepId, _GameArenaInstance2.default.getShowRadiuses());
        }
    }, {
        key: 'checkCurrentLevelPassed',
        value: function checkCurrentLevelPassed() {
            var currLvlObj = this.lvls[this.currLvl - 1];
            if (currLvlObj && this.score > currLvlObj.winScoreLimit) {
                bootbox.alert('Level ' + this.currLvl + ' is completed! Press ok to continue');
                this.currLvl += 1;
                this.stop();
                (0, _script.resetStartButtonToInitialState)();
                if (currLvlObj.enemies) {
                    this.enemies = this.enemies.concat(currLvlObj.enemies);
                }
                // update person position
                this.person = new _Person2.default();
                this.keys = undefined;
            }
        }
    }, {
        key: 'anyCollisionOccurred',
        value: function anyCollisionOccurred(hero, enemies) {

            for (var i = 0; i < enemies.length; i++) {
                if (this.collisionOccurred(hero, enemies[i])) {
                    return true;
                }
            }
            return false;
        }
    }, {
        key: 'collisionOccurred',
        value: function collisionOccurred(obj1, obj2) {
            var xColl = false;
            var yColl = false;

            if (obj1.x + obj1.width / 2 >= obj2.x - obj2.width / 2 && obj1.x - obj1.width / 2 <= obj2.x + obj2.width / 2) {
                xColl = true;
            }

            if (obj1.y + obj1.height / 2 >= obj2.y - obj2.height / 2 && obj1.y - obj1.height / 2 <= obj2.y + obj2.height / 2) {
                yColl = true;
            }

            return xColl && yColl;
        }
    }, {
        key: 'updateScoreArea',
        value: function updateScoreArea() {
            var scoreNumberSpan = document.getElementById('scoreNumber');
            scoreNumberSpan.innerHTML = this.score;
        }
    }, {
        key: 'resetScore',
        value: function resetScore() {
            var scoreNumberSpan = document.getElementById('scoreNumber');
            scoreNumberSpan.innerHTML = 0;
        }
    }, {
        key: 'finishGame',
        value: function finishGame() {
            var _this3 = this;

            this.stop();

            //var playerName = prompt('Record saving', 'Unnamed player');
            bootbox.prompt({
                title: "Enter you name",
                value: "Unnamed user",
                callback: function callback(playerName) {
                    if (playerName) {
                        _this3.fbDao.saveGame(_this3.gameCache.frames, _this3.score, playerName);
                        _this3.lsDao.saveRecord(_this3.score, playerName);
                    }
                    (0, _script.resetStartButtonToInitialState)();
                    _this3.resetScore();
                    _GameArenaInstance2.default.setGameArenaInstance(new GameArena(_this3.canvas, _this3.canvas.width, _this3.canvas.height, _Person2.default));
                    _this3.clear();
                }
            });
        }
    }, {
        key: 'replayLastGame',
        value: function replayLastGame() {
            var _this4 = this;

            var gamesFrommDB = this.fbDao.loadGames();
            gamesFrommDB.once('value').then(function (element) {

                var lastGameId = Object.values(element.val()).length;
                var foundGame = _this4.fbDao.loadGame(lastGameId);
                foundGame.once('value').then(function (element) {

                    _this4.frames = JSON.parse(Object.values(element.val())[0]);
                    _this4.interval = setInterval(_this4.drawFrame2.bind(_this4), 50);
                });
            });
        }
    }, {
        key: 'replaySelectedGame',
        value: function replaySelectedGame(gameId) {
            var _this5 = this;

            var gamesFrommDB = this.fbDao.loadGames();
            gamesFrommDB.once('value').then(function (element) {

                var foundGame = _this5.fbDao.loadGame(gameId);
                foundGame.once('value').then(function (element) {

                    _this5.frames = JSON.parse(Object.values(element.val())[0]);
                    _this5.interval = setInterval(_this5.drawFrame2.bind(_this5), 50);
                });
            });
        }
    }, {
        key: 'drawFrame2',
        value: function drawFrame2() {
            var _this6 = this;

            var frame = this.frames[this.stepId];
            if (!frame) {
                this.stop();
                this.stepId = 1;
                return;
            }
            this.clear();
            var hero = JSON.parse(frame.hero);
            var person = new _Person2.default(this.ctx, hero.width, hero.height, hero.color, hero.x, hero.y, hero.imgWidth, hero.imgHeight, hero.moveDirection, hero.i);
            person.update(this.ctx);

            var gameInProgressAndRadiusesAllowed = _GameArenaInstance2.default.getInReplay() === false && _GameArenaInstance2.default.getShowRadiuses();
            var inReplayStateAndRadiusesAllowed = _GameArenaInstance2.default.getInReplay() && this.frames[this.stepId].showRadiuses === true;
            var showRadiuses = inReplayStateAndRadiusesAllowed || gameInProgressAndRadiusesAllowed;

            frame.enemies.forEach(function (object) {
                var item = JSON.parse(object);
                var enemy;
                if (item.visionRadius) {
                    enemy = new _EnemyType2.default(_this6.ctx, item.width, item.height, item.color, item.x, item.y, item.speedV, item.speedH, item.visionRadius, item.i);
                    enemy.update(_this6.ctx, showRadiuses);
                } else {
                    enemy = new _EnemyType4.default(_this6.ctx, item.width, item.height, item.color, item.x, item.y, item.i);
                    enemy.update(_this6.ctx);
                }
            });

            this.stepId++;
        }
    }, {
        key: 'drawFrame',
        value: function drawFrame() {
            var _this7 = this;

            //Test hero rendering - comment and ucomment ls rendering
            // TODO also split fbDao for two parts.
            var hero1FromDB = this.fbDao.getFrameObjectsByFrameIdAndType(this.stepId, 'hero');
            hero1FromDB.once('value').then(function (element) {
                //console.log(element.child('content').key + ':' + element.child('content').val());
                _this7.clear();
                var hero = JSON.parse(element.child('content').val());
                var person = new _Person2.default(_this7.ctx, hero.width, hero.height, hero.color, hero.x, hero.y, hero.imgWidth, hero.imgHeight, hero.moveDirection, hero.i);
                person.update(_this7.ctx);
                _this7.stepId++;
            });
        }
    }]);

    return GameArena;
}();

exports.default = GameArena;

},{"../dao/FireBaseDao":1,"../dao/LocalStorageDao":2,"../script":12,"../service/DrawService":13,"./EnemyType1":3,"./EnemyType2":4,"./GameArenaInstance.js":6,"./GameCache":7,"./Levels":8,"./Person":9}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GameArenaInstance = function () {
    function GameArenaInstance() {
        _classCallCheck(this, GameArenaInstance);
    }

    _createClass(GameArenaInstance, null, [{
        key: "getGameArenaInstance",
        value: function getGameArenaInstance() {
            return this.gameArena;
        }
    }, {
        key: "setGameArenaInstance",
        value: function setGameArenaInstance(gameArena) {
            this.gameArena = gameArena;
        }
    }, {
        key: "getPersonPosition",
        value: function getPersonPosition() {
            return this.personPosition;
        }
    }, {
        key: "setPersonPosition",
        value: function setPersonPosition(personPosition) {
            this.personPosition = personPosition;
        }
    }, {
        key: "getShowBackground",
        value: function getShowBackground() {
            return this.showBackground;
        }
    }, {
        key: "setShowBackground",
        value: function setShowBackground(showBackground) {
            this.showBackground = showBackground;
        }
    }, {
        key: "getShowRadiuses",
        value: function getShowRadiuses() {
            return this.showRadiusesId;
        }
    }, {
        key: "setShowRadiuses",
        value: function setShowRadiuses(showRadiusesId) {
            this.showRadiusesId = showRadiusesId;
        }
    }, {
        key: "getInReplay",
        value: function getInReplay() {
            return this.inReplay;
        }
    }, {
        key: "setInReplay",
        value: function setInReplay(inReplay) {
            this.inReplay = inReplay;
        }
    }]);

    return GameArenaInstance;
}();

exports.default = GameArenaInstance;

},{}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GameCache = function () {
    function GameCache() {
        _classCallCheck(this, GameCache);

        this.frames = [];
    }

    _createClass(GameCache, [{
        key: "saveHero",
        value: function saveHero(hero, frameId) {
            if (!this.frames[frameId]) {
                this.initFrame(frameId);
            }
            this.frames[frameId].hero = JSON.stringify(hero);
        }
    }, {
        key: "saveEnemy",
        value: function saveEnemy(enemy, frameId) {
            if (!this.frames[frameId]) {
                this.initFrame(frameId);
            }
            this.frames[frameId].enemies.push(JSON.stringify(enemy));
        }
    }, {
        key: "saveBackGroundImage",
        value: function saveBackGroundImage(imgSrc, frameId) {
            if (!this.frames[frameId]) {
                this.initFrame(frameId);
            }
            this.frames[frameId].imageSource = imgSrc;
        }
    }, {
        key: "savePersonRadiusesShowOption",
        value: function savePersonRadiusesShowOption(frameId, showRadiuses) {
            if (!this.frames[frameId]) {
                this.initFrame(frameId);
            }
            this.frames[frameId].showRadiuses = showRadiuses;
        }
    }, {
        key: "initFrame",
        value: function initFrame(frameId) {
            if (this.frames.length === 0) {
                this.frames.push({
                    hero: {},
                    enemies: []
                });
                this.frames.push({
                    hero: {},
                    enemies: []
                });
            } else {
                this.frames[frameId] = {
                    hero: {},
                    enemies: []
                };
            }
        }
    }]);

    return GameCache;
}();

exports.default = GameCache;

},{}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _EnemyType = require('./EnemyType1');

var _EnemyType2 = _interopRequireDefault(_EnemyType);

var _EnemyType3 = require('./EnemyType2');

var _EnemyType4 = _interopRequireDefault(_EnemyType3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Levels = function () {
    function Levels() {
        _classCallCheck(this, Levels);
    }

    _createClass(Levels, null, [{
        key: 'getLevels',
        value: function getLevels() {
            return [{
                winScoreLimit: 10,
                imgSource: undefined,
                enemies: [
                // Jesuses
                new _EnemyType2.default(this.ctx, 15, 15, 'red', 600, 300, -3, 10, 200, 0), new _EnemyType2.default(this.ctx, 15, 15, 'red', 200, 300, -5, -5, 200, 0)]
            }, {
                winScoreLimit: 20,
                imgSource: undefined,
                enemies: [
                //Cats
                new _EnemyType4.default(), new _EnemyType4.default(),

                //Jesuses
                new _EnemyType2.default(this.ctx, 15, 15, 'red', 600, 300, -3, 10, 200, 0), new _EnemyType2.default(this.ctx, 15, 15, 'blue', 300, 600, -3)]
            }, {
                winScoreLimit: 30,
                imgSource: undefined,
                enemies: [
                //Cats
                new _EnemyType4.default(this.ctx, 32, 32, 'blue', 400, 100, 0, 'up'), new _EnemyType4.default(this.ctx, 32, 32, 'blue', 400, 423, 0, 'right'), new _EnemyType4.default(this.ctx, 32, 32, 'blue', 234, 576, 0, 'left'), new _EnemyType4.default(this.ctx, 32, 32, 'blue', 123, 123, 0, 'down'),

                //Jesuses
                new _EnemyType2.default(this.ctx, 20, 20, 'orange', 300, 800, -4), new _EnemyType2.default(this.ctx, 15, 15, 'red', 465, 234, -5, -5, 200, 0, 'left'), new _EnemyType2.default(), new _EnemyType2.default(this.ctx, 15, 15, 'blue', 300, 600, -3)]
            }];
        }
    }]);

    return Levels;
}();

exports.default = Levels;

},{"./EnemyType1":3,"./EnemyType2":4}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _PersonImgSettings = require('../settings/PersonImgSettings');

var _PersonImgSettings2 = _interopRequireDefault(_PersonImgSettings);

var _GameArenaInstance = require('./GameArenaInstance.js');

var _GameArenaInstance2 = _interopRequireDefault(_GameArenaInstance);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Person = function () {
    function Person(ctx) {
        var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;
        var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;
        var color = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'green';
        var x = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 900;
        var y = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 50;
        var imgWidth = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 100;
        var imgHeight = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 100;
        var moveDirection = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 'up';
        var pictureNumber = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;

        _classCallCheck(this, Person);

        this.ctx = ctx;
        this.width = width;
        this.height = height;
        this.imgWidth = imgWidth;
        this.imgHeight = imgHeight;
        this.color = color;
        this.speed = 0;
        this.angle = 0;
        this.moveAngle = 0;
        this.x = x;
        this.y = y;

        this.sprites = [].slice.call(document.querySelectorAll('.person-img'));
        this.spriteNum = 0;
        this.moveDirection = moveDirection;
        this.i = pictureNumber;
    }

    _createClass(Person, [{
        key: 'getSprite',
        value: function getSprite() {
            this.spriteNum = (this.spriteNum + 1) % this.sprites.length;
            return this.sprites[this.spriteNum];
        }
    }, {
        key: 'update',
        value: function update(ctx) {
            ctx.save();
            /*ctx.translate(this.x, this.y);
            //ctx.rotate(this.angle);
            ctx.fillStyle = this.color;
            ctx.fillRect(this.imgWidth / -2, this.imgHeight / -2, this.imgWidth, this.imgHeight);
            ctx.restore();*/

            ctx.save();
            ctx.translate(this.x, this.y);

            var personImgProperties = this.getPersonImg();
            ctx.drawImage(this.getSprite(), personImgProperties.sx, personImgProperties.sy, personImgProperties.sWidth, personImgProperties.sHeight, this.imgWidth / -2, this.imgHeight / -2, this.imgWidth, this.imgHeight);

            ctx.restore();

            this.i += 1;
            if (this.i % 6 === 0) {
                this.i = 0;
            }

            return this;
        }
    }, {
        key: 'newPos',
        value: function newPos(options, fieldWidth, fieldHeight) {
            this.moveAngle = 0;
            this.speed = 0;

            this.deltaX = 0;
            this.deltaY = 0;

            var a = options.left && (this.deltaX = -10) && (this.moveDirection = 'left');
            var b = options.right && (this.deltaX = 10) && (this.moveDirection = 'right');
            var c = options.up && (this.deltaY = 10) && (this.moveDirection = 'up');
            var d = options.down && (this.deltaY = -10) && (this.moveDirection = 'down');

            //this.angle += this.moveAngle * Math.PI / 180;
            this.x += this.deltaX;
            this.y -= this.deltaY;

            _GameArenaInstance2.default.setPersonPosition({
                xPerson: this.x,
                yPerson: this.y
            });

            if (this.x > fieldWidth) {
                this.x = 0;
            } else if (this.x < 0) {
                this.x = fieldWidth;
            }
            if (this.y > fieldHeight) {
                this.y = 0;
            } else if (this.y < 0) {
                this.y = fieldHeight;
            }
            return this;
        }
    }, {
        key: 'getPersonImg',
        value: function getPersonImg() {
            if (this.moveDirection === 'up') {
                return _PersonImgSettings2.default.getUpSettings()[this.i];
            }
            if (this.moveDirection === 'down') {
                return _PersonImgSettings2.default.getDownSettings()[this.i];
            }
            if (this.moveDirection === 'left') {
                return _PersonImgSettings2.default.getLeftSettings()[this.i];
            }
            if (this.moveDirection === 'right') {
                return _PersonImgSettings2.default.getRightSettings()[this.i];
            }

            // default direction
            return _PersonImgSettings2.default.getDownSettings()[this.i];
        }
    }]);

    return Person;
}();

exports.default = Person;

},{"../settings/PersonImgSettings":16,"./GameArenaInstance.js":6}],10:[function(require,module,exports){
'use strict';

var _script = require('./script');

(function () {
    (0, _script.prepareElements)();
})();

},{"./script":12}],11:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Router = function () {
    function Router(options) {
        _classCallCheck(this, Router);

        this.routes = options.routes || [];
        this.eventBus = options.eventBus;
        this.init();
    }

    _createClass(Router, [{
        key: 'init',
        value: function init() {
            var _this = this;

            // subscribe window on hashchange to handle url from router
            window.addEventListener('hashchange', function () {
                return _this.handleUrl(window.location.hash);
            });
            // and at once handle base url
            this.handleUrl(window.location.hash);
        }
    }, {
        key: 'findPreviousActiveRoute',
        value: function findPreviousActiveRoute() {
            return this.currentRoute;
        }
    }, {
        key: 'findNewActiveRoute',
        value: function findNewActiveRoute(providedUrl) {
            // return just part of url after # symbol
            var url = providedUrl.split('#').pop();

            return this.routes.find(function (route) {
                if (typeof route.match === 'string') {
                    return route.match === url;
                }

                if (route.match instanceof RegExp) {
                    return route.match.test(url);
                }

                if (typeof route.match === 'function') {
                    return route.match(url);
                }
            });
        }
    }, {
        key: 'getRouteParams',
        value: function getRouteParams(route, url) {
            var params = url.match(route.match) || [];
            params.shift();
            return params;
        }
    }, {
        key: 'handleUrl',
        value: function handleUrl(url) {
            url = url.slice(1);
            // Найти текущий роут
            var prevRoute = this.findPreviousActiveRoute();
            // Найти новый роут
            var newRoute = this.findNewActiveRoute(url);

            var newRouteParams = this.getRouteParams(newRoute, url);

            if (prevRoute && prevRoute.onLeave) {
                prevRoute.onLeave(this.currentRouteParams);
            }

            if (newRoute && newRoute.onBeforeEnter) {
                newRoute.onBeforeEnter(newRouteParams);
            }

            if (newRoute && newRoute.onEnter) {
                newRoute.onEnter(newRouteParams);
            }

            this.currentRoute = newRoute;
            this.currentRouteParams = newRouteParams;
        }
    }]);

    return Router;
}();

exports.default = Router;

},{}],12:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.prepareElements = prepareElements;
exports.resetStartButtonToInitialState = resetStartButtonToInitialState;

var _FireBaseDao = require('./dao/FireBaseDao');

var _FireBaseDao2 = _interopRequireDefault(_FireBaseDao);

var _LocalStorageDao = require('./dao/LocalStorageDao');

var _LocalStorageDao2 = _interopRequireDefault(_LocalStorageDao);

var _DrawService = require('./service/DrawService');

var _DrawService2 = _interopRequireDefault(_DrawService);

var _Router = require('./router/Router');

var _Router2 = _interopRequireDefault(_Router);

var _Person = require('./game/Person');

var _Person2 = _interopRequireDefault(_Person);

var _GameArena = require('./game/GameArena');

var _GameArena2 = _interopRequireDefault(_GameArena);

var _GameArenaInstance = require('./game/GameArenaInstance.js');

var _GameArenaInstance2 = _interopRequireDefault(_GameArenaInstance);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function prepareElements() {
    var FIELD_WIDTH = document.documentElement.clientWidth;
    var FIELD_HEIGHT = document.documentElement.clientHeight - document.getElementsByTagName('nav')[0].clientHeight;

    _GameArenaInstance2.default.setPersonPosition({
        xPerson: 0,
        yPerson: 0
    });

    var gameIdToReplay;
    var lsdao = new _LocalStorageDao2.default();
    var fbDao = new _FireBaseDao2.default();

    var canvas = document.querySelector('canvas');
    var drawService = new _DrawService2.default(lsdao);
    _GameArenaInstance2.default.setGameArenaInstance(new _GameArena2.default(canvas, FIELD_WIDTH, FIELD_HEIGHT, _Person2.default));
    var routes = [{
        name: 'game',
        match: /[/]game/,
        onBeforeEnter: function onBeforeEnter() {
            var gameArea = document.getElementById('gameArea');
            if (gameArea) {
                gameArea.className = 'gameArea active';
                resetStartButtonToInitialState();
                makeReplayAreaPassive();
                makeControlsAreaActive();
                setElementAndParentStyle('gameLink', 'active');
            }
        },
        onEnter: function onEnter() {},
        onLeave: function onLeave() {
            // Stop the game
            _GameArenaInstance2.default.getGameArenaInstance().stop();

            // Hide game area
            var gameArea = document.getElementById('gameArea');
            gameArea.className = 'gameArea passive';

            // Change action icon
            var controlsArea = document.getElementById('controlsArea');
            controlsArea.children[0].src = 'img/play.png';
            setElementAndParentStyle('gameLink', '');
            _GameArenaInstance2.default.getGameArenaInstance().stop();
        }
    }, {
        name: 'showGame',
        match: /[/]showGame/,
        onBeforeEnter: function onBeforeEnter() {
            var gameArea = document.getElementById('gameArea');
            if (gameArea) {
                gameArea.className = 'gameArea active';
            }
        },
        onEnter: function onEnter() {},
        onLeave: function onLeave() {

            // Hide game area
            var gameArea = document.getElementById('gameArea');
            gameArea.className = 'gameArea passive';

            // Change action icon
            var controlsArea = document.getElementById('controlsArea');
            controlsArea.children[0].src = 'img/play.png';

            var replayArea = document.getElementById('replayArea');
            replayArea.className = 'replayArea passive';

            // Stop the game
            _GameArenaInstance2.default.getGameArenaInstance().stop();
        }
    }, {
        name: 'records',
        match: /[/]records/,
        onBeforeEnter: function onBeforeEnter() {
            var recordsArea = document.getElementById('recordsArea');
            recordsArea.className = 'active';
            recordsArea.style.width = document.documentElement.clientWidth;
            recordsArea.style.height = document.documentElement.clientHeight;

            var tableArea = document.getElementById('recordTableId');
            tableArea.innerHTML = drawService.createRecordTableHTML();
            tableArea.className = 'table';

            setElementAndParentStyle('recordLink', 'active');
        },
        onEnter: function onEnter() {},
        onLeave: function onLeave() {
            var recordsArea = document.getElementById('recordsArea');
            recordsArea.className = 'recordsArea passive';

            var tableArea = document.getElementById('recordTableId');
            tableArea.className = 'tableArea passive';

            setElementAndParentStyle('recordLink', '');
        }
    }, {
        name: 'replays',
        match: /[/]replays/,
        onBeforeEnter: function onBeforeEnter() {
            setElementAndParentStyle('replayLink', 'active');

            var replaysPage = document.getElementById('replaysPage');
            replaysPage.className = 'replaysPage active';
            replaysPage.style.width = document.documentElement.clientWidth;
            replaysPage.style.height = document.documentElement.clientHeight;

            var tableArea = document.getElementById('replaysTableId');

            fbDao.loadGames().once('value').then(function (element) {

                tableArea.innerHTML = drawService.createReplayTableHTML(Object.values(element.val()));
                tableArea.className = 'table';
            });
        },
        onEnter: function onEnter() {
            return console.log('onEnter replays');
        },
        onLeave: function onLeave() {
            setElementAndParentStyle('replayLink', '');

            var recordsArea = document.getElementById('replaysPage');
            recordsArea.className = 'replaysPage passive';

            var tableArea = document.getElementById('replaysTableId');
            tableArea.className = 'tableArea passive';
        }
    }, {
        name: 'about',
        match: /[/]about/,
        onBeforeEnter: function onBeforeEnter() {
            setElementAndParentStyle('aboutLink', 'active');
            setElementAndParentStyle('aboutArea', 'aboutArea active');
        },
        onEnter: function onEnter() {
            return console.log('onEnter about');
        },
        onLeave: function onLeave() {
            setElementAndParentStyle('aboutLink', '');
            setElementStyle('aboutArea', 'aboutArea passive');
        }
    }, {
        name: 'options',
        match: /[/]options/,
        onBeforeEnter: function onBeforeEnter() {
            setElementAndParentStyle('optionsLink', 'active');
            setElementAndParentStyle('settingsArea', 'settingsArea active');
        },
        onEnter: function onEnter() {
            return console.log('onEnter options');
        },
        onLeave: function onLeave() {
            setElementAndParentStyle('optionsLink', '');
            setElementStyle('settingsArea', 'settingsArea passive');
        }
    }];

    location.hash = '/game';

    var options = {
        routes: routes
    };
    var router = new _Router2.default(options);

    var controlsArea = document.getElementById('controlsArea');
    controlsArea.addEventListener('click', function () {

        var activeImg = this.children[0].src;
        if (activeImg.includes('play')) {
            _GameArenaInstance2.default.getGameArenaInstance().start();
            this.children[0].src = 'img/pause.png';
        } else {
            _GameArenaInstance2.default.getGameArenaInstance().stop();
            this.children[0].src = 'img/play.png';
        }
        _GameArenaInstance2.default.setInReplay(false);
    });

    var replayArea = document.getElementById('replayArea');
    replayArea.addEventListener('click', function () {
        if (!gameIdToReplay) {
            _GameArenaInstance2.default.getGameArenaInstance().replayLastGame();
        }
        _GameArenaInstance2.default.setInReplay(true);
        _GameArenaInstance2.default.getGameArenaInstance().replaySelectedGame(gameIdToReplay);
    });

    var tableArea = document.getElementById('replaysTableId');
    tableArea.addEventListener('click', function () {
        if (event.target.tagName === 'A') {
            gameIdToReplay = Number(event.target.parentNode.parentNode.id); // TODO: make independent link
            drawService.makePlayLastGameButtonVisible();
        }
    });

    var showBackgroundCheckBox = document.getElementById('showBackgroundId');

    showBackgroundCheckBox.addEventListener('change', function () {
        var showBackground = _GameArenaInstance2.default.getShowBackground();

        if (showBackground != undefined) {
            _GameArenaInstance2.default.setShowBackground(!showBackground);
        } else {
            _GameArenaInstance2.default.setShowBackground(this.checked);
        }
    });

    var showRadiusesCheckBox = document.getElementById('showRadiusesId');

    showRadiusesCheckBox.addEventListener('change', function () {
        var showRadiusesId = _GameArenaInstance2.default.getShowRadiuses();

        if (showRadiusesId != undefined) {
            _GameArenaInstance2.default.setShowRadiuses(!showRadiusesId);
        } else {
            _GameArenaInstance2.default.setShowRadiuses(this.checked);
        }
    });
}

function resetStartButtonToInitialState() {
    var controlsArea = document.getElementById('controlsArea');
    controlsArea.children[0].src = 'img/play.png';
}

function makeReplayAreaPassive() {

    var replayArea = document.getElementById('replayArea');
    replayArea.className = 'replayArea passive';
}

function makeControlsAreaActive() {
    var controlsArea = document.getElementById('controlsArea');
    controlsArea.className = '';
}

function setElementAndParentStyle(id, style) {
    var element = document.getElementById(id);
    element.className = style;
    element.parentElement.className = style;
}

function setElementStyle(id, style) {
    var element = document.getElementById(id);
    element.className = style;
}

},{"./dao/FireBaseDao":1,"./dao/LocalStorageDao":2,"./game/GameArena":5,"./game/GameArenaInstance.js":6,"./game/Person":9,"./router/Router":11,"./service/DrawService":13}],13:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DrawService = function () {
    function DrawService(dao) {
        _classCallCheck(this, DrawService);

        this.dao = dao;
    }

    _createClass(DrawService, [{
        key: 'createRecordTableEl',
        value: function createRecordTableEl() {

            var tableId = 'recordTableId';
            var newTbl = document.createElement('table');
            newTbl.className = 'recordTable';
            newTbl.innerHTML = this.createRecordTableHTML();
            newTbl.id = tableId;
            return newTbl;
        }
    }, {
        key: 'createRecordTableHTML',
        value: function createRecordTableHTML() {
            var tableHTML = '<table  class="table"><thead><tr><th>Player</th><th>Score</th></tr></thead><tbody>';
            var records = this.dao.getStoredData('playerRecordsId');

            for (var key in records) {
                tableHTML += '<tr><td>' + key + '</td><td>' + records[key] + '</td></tr>';
            }
            tableHTML += '</tbody></table>';
            return tableHTML;
        }
    }, {
        key: 'createReplayTableHTML',
        value: function createReplayTableHTML(data) {
            var tableHTML = '<table class="table"><thead><tr><th>Player</th><th>Score</th><th>Time</th></tr></thead><tbody>';

            for (var i = 0; i < data.length; i++) {
                var player = data[i].player;
                var score = data[i].score;
                var time = data[i].time;
                tableHTML += '<tr id=' + (i + 1) + '>' + '<td>' + '<a href="#/showGame">' + player + '</a>' + '</td>' + '<td>' + score + '</td>' + '<td>' + new Date(time).toLocaleString() + '</td>' + '</tr>';
            }
            tableHTML += '</tbody></table>';
            return tableHTML;
        }
    }, {
        key: 'makePlayLastGameButtonVisible',
        value: function makePlayLastGameButtonVisible() {

            var controlsArea = document.getElementById('controlsArea');
            controlsArea.className = 'passive';

            var replayArea = document.getElementById('replayArea');
            replayArea.className = 'replayArea active';
        }
    }]);

    return DrawService;
}();

exports.default = DrawService;

},{}],14:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CatImgSettings = function () {
    function CatImgSettings() {
        _classCallCheck(this, CatImgSettings);
    }

    _createClass(CatImgSettings, null, [{
        key: "getRightSettings",
        value: function getRightSettings() {
            return [{
                sx: 0,
                sy: 64,
                sWidth: 32,
                sHeight: 32
            }, {
                sx: 32,
                sy: 64,
                sWidth: 32,
                sHeight: 32
            }, {
                sx: 64,
                sy: 64,
                sWidth: 32,
                sHeight: 32
            }, {
                sx: 96,
                sy: 64,
                sWidth: 32,
                sHeight: 32
            }];
        }
    }, {
        key: "getLeftSettings",
        value: function getLeftSettings() {
            return [{
                sx: 0,
                sy: 32,
                sWidth: 32,
                sHeight: 32
            }, {
                sx: 32,
                sy: 32,
                sWidth: 32,
                sHeight: 32
            }, {
                sx: 64,
                sy: 32,
                sWidth: 32,
                sHeight: 32
            }, {
                sx: 96,
                sy: 32,
                sWidth: 32,
                sHeight: 32
            }];
        }
    }, {
        key: "getDownSettings",
        value: function getDownSettings() {
            return [{
                sx: 0,
                sy: 0,
                sWidth: 32,
                sHeight: 32
            }, {
                sx: 32,
                sy: 0,
                sWidth: 32,
                sHeight: 32
            }, {
                sx: 64,
                sy: 0,
                sWidth: 32,
                sHeight: 32
            }, {
                sx: 96,
                sy: 0,
                sWidth: 32,
                sHeight: 32
            }];
        }
    }, {
        key: "getUpSettings",
        value: function getUpSettings() {
            return [{
                sx: 0,
                sy: 96,
                sWidth: 32,
                sHeight: 32
            }, {
                sx: 32,
                sy: 96,
                sWidth: 32,
                sHeight: 32
            }, {
                sx: 64,
                sy: 96,
                sWidth: 32,
                sHeight: 32
            }, {
                sx: 96,
                sy: 96,
                sWidth: 32,
                sHeight: 32
            }];
        }
    }]);

    return CatImgSettings;
}();

exports.default = CatImgSettings;

},{}],15:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var JesusImgSettings = function () {
    function JesusImgSettings() {
        _classCallCheck(this, JesusImgSettings);
    }

    _createClass(JesusImgSettings, null, [{
        key: "getRightSettings",
        value: function getRightSettings() {
            return [{
                sx: 0,
                sy: 96,
                sWidth: 32,
                sHeight: 48
            }, {
                sx: 32,
                sy: 96,
                sWidth: 32,
                sHeight: 48
            }, {
                sx: 64,
                sy: 96,
                sWidth: 32,
                sHeight: 48
            }, {
                sx: 96,
                sy: 96,
                sWidth: 32,
                sHeight: 48
            }];
        }
    }, {
        key: "getLeftSettings",
        value: function getLeftSettings() {
            return [{
                sx: 0,
                sy: 48,
                sWidth: 32,
                sHeight: 48
            }, {
                sx: 32,
                sy: 48,
                sWidth: 32,
                sHeight: 48
            }, {
                sx: 64,
                sy: 48,
                sWidth: 32,
                sHeight: 48
            }, {
                sx: 96,
                sy: 48,
                sWidth: 32,
                sHeight: 48
            }];
        }
    }, {
        key: "getDownSettings",
        value: function getDownSettings() {
            return [{
                sx: 0,
                sy: 144,
                sWidth: 32,
                sHeight: 48
            }, {
                sx: 32,
                sy: 144,
                sWidth: 32,
                sHeight: 48
            }, {
                sx: 64,
                sy: 144,
                sWidth: 32,
                sHeight: 48
            }, {
                sx: 96,
                sy: 144,
                sWidth: 32,
                sHeight: 48
            }];
        }
    }, {
        key: "getUpSettings",
        value: function getUpSettings() {
            return [{
                sx: 0,
                sy: 0,
                sWidth: 32,
                sHeight: 48
            }, {
                sx: 32,
                sy: 0,
                sWidth: 32,
                sHeight: 48
            }, {
                sx: 64,
                sy: 0,
                sWidth: 32,
                sHeight: 48
            }, {
                sx: 96,
                sy: 0,
                sWidth: 32,
                sHeight: 48
            }];
        }
    }]);

    return JesusImgSettings;
}();

exports.default = JesusImgSettings;

},{}],16:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PersonImgSettings = function () {
    function PersonImgSettings() {
        _classCallCheck(this, PersonImgSettings);
    }

    _createClass(PersonImgSettings, null, [{
        key: "getUpSettings",
        value: function getUpSettings() {
            return [{
                sx: 0,
                sy: 200,
                sWidth: 100,
                sHeight: 100
            }, {
                sx: 100,
                sy: 200,
                sWidth: 100,
                sHeight: 100
            }, {
                sx: 200,
                sy: 200,
                sWidth: 100,
                sHeight: 100
            }, {
                sx: 300,
                sy: 200,
                sWidth: 100,
                sHeight: 100
            }, {
                sx: 400,
                sy: 200,
                sWidth: 100,
                sHeight: 100
            }, {
                sx: 500,
                sy: 200,
                sWidth: 100,
                sHeight: 100
            }];
        }
    }, {
        key: "getDownSettings",
        value: function getDownSettings() {
            return [{
                sx: 0,
                sy: 0,
                sWidth: 100,
                sHeight: 100
            }, {
                sx: 100,
                sy: 0,
                sWidth: 100,
                sHeight: 100
            }, {
                sx: 200,
                sy: 0,
                sWidth: 100,
                sHeight: 100
            }, {
                sx: 300,
                sy: 0,
                sWidth: 100,
                sHeight: 100
            }, {
                sx: 400,
                sy: 0,
                sWidth: 100,
                sHeight: 100
            }, {
                sx: 500,
                sy: 0,
                sWidth: 100,
                sHeight: 100
            }];
        }
    }, {
        key: "getLeftSettings",
        value: function getLeftSettings() {
            return [{
                sx: 0,
                sy: 300,
                sWidth: 100,
                sHeight: 100
            }, {
                sx: 100,
                sy: 300,
                sWidth: 100,
                sHeight: 100
            }, {
                sx: 200,
                sy: 300,
                sWidth: 100,
                sHeight: 100
            }, {
                sx: 300,
                sy: 300,
                sWidth: 100,
                sHeight: 100
            }, {
                sx: 400,
                sy: 300,
                sWidth: 100,
                sHeight: 100
            }, {
                sx: 500,
                sy: 300,
                sWidth: 100,
                sHeight: 100
            }];
        }
    }, {
        key: "getRightSettings",
        value: function getRightSettings() {
            return [{
                sx: 0,
                sy: 100,
                sWidth: 100,
                sHeight: 100
            }, {
                sx: 100,
                sy: 100,
                sWidth: 100,
                sHeight: 100
            }, {
                sx: 200,
                sy: 100,
                sWidth: 100,
                sHeight: 100
            }, {
                sx: 300,
                sy: 100,
                sWidth: 100,
                sHeight: 100
            }, {
                sx: 400,
                sy: 100,
                sWidth: 100,
                sHeight: 100
            }, {
                sx: 500,
                sy: 100,
                sWidth: 100,
                sHeight: 100
            }];
        }
    }]);

    return PersonImgSettings;
}();

exports.default = PersonImgSettings;

},{}]},{},[10]);
